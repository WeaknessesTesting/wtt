Flawfinder version 2.0.10, (C) 2001-2019 David A. Wheeler.
Number of rules (primarily dangerous function names) in C/C++ ruleset: 223
Examining libomemo/test/test_crypto.c
Examining libomemo/test/test_libomemo.c
Examining libomemo/test/test_storage.c
Examining libomemo/src/libomemo.h
Examining libomemo/src/libomemo_storage.h
Examining libomemo/src/libomemo_storage.c
Examining libomemo/src/libomemo_crypto.h
Examining libomemo/src/libomemo.c
Examining libomemo/src/libomemo_crypto.c
Examining libomemo/step_source/Files/test_libomemo_rtc.c
Examining libomemo/step_source/Files/test_libomemo_ft.c

FINAL RESULTS:

libomemo/step_source/Files/test_libomemo_ft.c:25:  [5] (buffer) gets:
  Does not check for buffer overflows (CWE-120, CWE-20). Use fgets() instead.
libomemo/src/libomemo.c:456:  [4] (format) snprintf:
  If format strings can be influenced by an attacker, they can be exploited,
  and note that sprintf variations do not always \0-terminate (CWE-134). Use
  a constant for the format specification.
libomemo/src/libomemo.c:458:  [4] (format) snprintf:
  If format strings can be influenced by an attacker, they can be exploited,
  and note that sprintf variations do not always \0-terminate (CWE-134). Use
  a constant for the format specification.
libomemo/src/libomemo.c:615:  [4] (format) snprintf:
  If format strings can be influenced by an attacker, they can be exploited,
  and note that sprintf variations do not always \0-terminate (CWE-134). Use
  a constant for the format specification.
libomemo/src/libomemo.c:623:  [4] (format) snprintf:
  If format strings can be influenced by an attacker, they can be exploited,
  and note that sprintf variations do not always \0-terminate (CWE-134). Use
  a constant for the format specification.
libomemo/src/libomemo.c:948:  [4] (format) snprintf:
  If format strings can be influenced by an attacker, they can be exploited,
  and note that sprintf variations do not always \0-terminate (CWE-134). Use
  a constant for the format specification.
libomemo/src/libomemo.c:956:  [4] (format) snprintf:
  If format strings can be influenced by an attacker, they can be exploited,
  and note that sprintf variations do not always \0-terminate (CWE-134). Use
  a constant for the format specification.
libomemo/src/libomemo.c:399:  [3] (random) g_random_int_range:
  This function is not sufficiently random for security-related functions
  such as key and nonce creation (CWE-327). Use a more secure technique for
  acquiring random values.
libomemo/src/libomemo.c:401:  [3] (random) random:
  This function is not sufficiently random for security-related functions
  such as key and nonce creation (CWE-327). Use a more secure technique for
  acquiring random values.
libomemo/src/libomemo.c:930:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  Make sure destination can always hold the source data.
libomemo/src/libomemo.c:1116:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  Make sure destination can always hold the source data.
libomemo/src/libomemo.c:1483:  [2] (buffer) memcpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  Make sure destination can always hold the source data.
libomemo/step_source/Files/test_libomemo_ft.c:24:  [2] (buffer) char:
  Statically-sized arrays can be improperly restricted, leading to potential
  overflows or other issues (CWE-119!/CWE-120). Perform bounds checking, use
  functions that limit length, or ensure that the size is larger than the
  maximum possible length.
libomemo/step_source/Files/test_libomemo_ft.c:30:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move things
  around to create a race condition, control its ancestors, or change its
  contents? (CWE-362).
libomemo/src/libomemo.c:158:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated; if given one it may
  perform an over-read (it could cause a crash if unprotected) (CWE-126).
libomemo/src/libomemo.c:518:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated; if given one it may
  perform an over-read (it could cause a crash if unprotected) (CWE-126).
libomemo/src/libomemo.c:661:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated; if given one it may
  perform an over-read (it could cause a crash if unprotected) (CWE-126).
libomemo/src/libomemo.c:703:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated; if given one it may
  perform an over-read (it could cause a crash if unprotected) (CWE-126).
libomemo/src/libomemo.c:715:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated; if given one it may
  perform an over-read (it could cause a crash if unprotected) (CWE-126).
libomemo/src/libomemo.c:1104:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated; if given one it may
  perform an over-read (it could cause a crash if unprotected) (CWE-126).
libomemo/src/libomemo.c:1332:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated; if given one it may
  perform an over-read (it could cause a crash if unprotected) (CWE-126).
libomemo/src/libomemo.c:1382:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated; if given one it may
  perform an over-read (it could cause a crash if unprotected) (CWE-126).
libomemo/step_source/Files/test_libomemo_ft.c:28:  [1] (buffer) strncat:
  Easily used incorrectly (e.g., incorrectly computing the correct maximum
  size to add) [MS-banned] (CWE-120). Consider strcat_s, strlcat, snprintf,
  or automatically resizing strings.
libomemo/test/test_crypto.c:38:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated; if given one it may
  perform an over-read (it could cause a crash if unprotected) (CWE-126).

ANALYSIS SUMMARY:

Hits = 24
Lines analyzed = 4538 in approximately 0.13 seconds (33712 lines/second)
Physical Source Lines of Code (SLOC) = 3108
Hits@level = [0]   5 [1]  10 [2]   5 [3]   2 [4]   6 [5]   1
Hits@level+ = [0+]  29 [1+]  24 [2+]  14 [3+]   9 [4+]   7 [5+]   1
Hits/KSLOC@level+ = [0+] 9.33076 [1+] 7.72201 [2+] 4.5045 [3+] 2.89575 [4+] 2.25225 [5+] 0.32175
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
See 'Secure Programming HOWTO'
(https://dwheeler.com/secure-programs) for more information.
